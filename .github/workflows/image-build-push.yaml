---
name: Image Build and Push

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

defaults:
  run:
    shell: bash

permissions:
  contents: read
  packages: write
  # This is used to complete the identity challenge with sigstore/fulcio.
  id-token: write

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-push:
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge with sigstore/fulcio.
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64

    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Install cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159  # v3.9.2

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1
        with:
          install: true
          cleanup: false
          platforms: ${{ matrix.platform }}
          config-inline: |
            [worker.oci]
            gc = true
            gckeepstorage = 10_000  # 10 GB

            [[worker.oci.gcpolicy]]
            all = true
            keepBytes = 10_000_000_000  # 10 GB
            keepDuration = 7_776_000  # 90 days

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: docker_meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f  # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=edge
            # FIXME: Remove explicit `latest` tag, once we start tagging releases
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=sha,format=long

      - name: Inject Docker Build(x|Kit) cache mounts
        uses: sid-maddy/buildkit-cache-dance/inject@cc79294360549b4d25e3c026b0a4b37576bba7c3  # v1
        with:
          cache-mounts: |
            cargo-registry,/usr/local/cargo/registry
            rust-target-release,/app/target
          github-token: ${{ secrets.GITHUB_TOKEN }}
          key: rust-buildkit-cache-${{ matrix.platform }}-${{ hashFiles('Cargo.toml', 'Cargo.lock') }}
          restore-keys: |
            rust-buildkit-cache-${{ matrix.platform }}-

      - name: Read Rust channel
        id: rust-channel
        run: |
          python3 <<'EOF' >"${GITHUB_ENV}"
          import tomllib
          from pathlib import Path

          rust_toolchain = tomllib.loads(Path("./rust-toolchain.toml").read_text())
          print(f"RUST_VERSION={rust_toolchain["toolchain"]["channel"]}")
          EOF

      - name: Build and push Docker image
        id: docker_build_push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            RUST_VERSION=${{ env.RUST_VERSION }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
          file: Containerfile
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          push: ${{ github.ref == 'refs/heads/main' || startswith(github.event.ref, 'refs/tags/v') }}
          tags: ${{ steps.docker_meta.outputs.tags }}

      - name: Extract Docker Build(x|Kit) cache mounts
        uses: sid-maddy/buildkit-cache-dance/extract@cc79294360549b4d25e3c026b0a4b37576bba7c3  # v1
        with:
          cache-mounts: |
            cargo-registry,/usr/local/cargo/registry
            rust-target-release,/app/target
          github-token: ${{ secrets.GITHUB_TOKEN }}
          key: rust-buildkit-cache-${{ matrix.platform }}-${{ hashFiles('Cargo.toml', 'Cargo.lock') }}

      # Sign the resulting Docker image digest.
      # This will only write to the public Rekor transparency log when the Docker repository is public to avoid leaking
      # data. If you would like to publish transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.ref == 'refs/heads/main' || startswith(github.event.ref, 'refs/tags/v') }}
        # This step uses the identity token to provision an ephemeral certificate against the sigstore community Fulcio
        # instance.
        run: cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.docker_build_push.outputs.digest }}

      - name: Export digest
        if: ${{ github.ref == 'refs/heads/main' || startswith(github.event.ref, 'refs/tags/v') }}
        run: |
          mkdir -p /tmp/digests
          digest='${{ steps.docker_build_push.outputs.digest }}'
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        if: ${{ github.ref == 'refs/heads/main' || startswith(github.event.ref, 'refs/tags/v') }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          if-no-files-found: error
          name: digests
          path: /tmp/digests/*
          retention-days: 1

  merge:
    if: ${{ github.ref == 'refs/heads/main' || startswith(github.event.ref, 'refs/tags/v') }}
    needs:
      - build-push

    runs-on: ubuntu-24.04
    steps:
      - name: Download digests
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: digests
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1  # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: docker_meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f  # v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=edge
            # FIXME: Remove explicit `latest` tag once we start tagging releases
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
            type=sha,format=long

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: >
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "${DOCKER_METADATA_OUTPUT_JSON}") \
            $(printf ' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: >-
          docker buildx imagetools inspect \
            '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.docker_meta.outputs.version }}'
